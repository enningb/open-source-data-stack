{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v5.json", "dbt_version": "1.1.0", "generated_at": "2023-07-23T13:31:19.231215Z", "invocation_id": "7c54e549-b842-4ab8-a2a5-91d17a88d37f", "env": {}, "project_id": "06e5b98c2db46f8a72cc4f66410e9b3b", "user_id": "1b0091fc-1df3-4c2c-b858-c17490e77cbd", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.jaffle_shop.int_orders": {"raw_sql": "with \n\norders as (\n\n  select * from {{ ref('stg_jaffle_shop__orders') }}\n\n),\n\npayments as (\n\n  select * from {{ ref('stg_stripe__payments') }}\n\n),\n\ncompleted_payments as (\n\n  select \n    order_id,\n    max(payment_created_at) as payment_finalized_date,\n    sum(payment_amount) as total_amount_paid\n  from payments\n  where payment_status <> 'fail'\n  group by 1\n\n),\n\npaid_orders as (\n\n  select \n    orders.order_id,\n    orders.customer_id,\n    orders.order_placed_at,\n    orders.order_status,\n    completed_payments.total_amount_paid,\n    completed_payments.payment_finalized_date\n  from orders\n left join completed_payments on orders.order_id = completed_payments.order_id\n)\n\nselect * from paid_orders", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jaffle_shop.stg_jaffle_shop__orders", "model.jaffle_shop.stg_stripe__payments"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "intermediate", "int_orders"], "unique_id": "model.jaffle_shop.int_orders", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "intermediate/int_orders.sql", "original_file_path": "models/intermediate/int_orders.sql", "name": "int_orders", "alias": "int_orders", "checksum": {"name": "sha256", "checksum": "0dc9923b6e6b72b3dbf1d6ea6472b0243581eb531175412f7d52730e3e981218"}, "tags": [], "refs": [["stg_jaffle_shop__orders"], ["stg_stripe__payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1690119079.958451}, "model.jaffle_shop.fct_customer_orders": {"raw_sql": "with \n\ncustomers as (\n\n  select * from {{ ref('stg_jaffle_shop__customers') }}\n\n),\n\npaid_orders as (\n\n  select * from {{ ref('int_orders') }}\n\n),\n\nfinal as (\n\n  select\n    paid_orders.order_id,\n    paid_orders.customer_id,\n    paid_orders.order_placed_at,\n    paid_orders.order_status,\n    paid_orders.total_amount_paid,\n    paid_orders.payment_finalized_date,\n    customers.customer_first_name,\n    customers.customer_last_name,\n\n    -- sales transaction sequence\n    row_number() over (order by paid_orders.order_id) as transaction_seq,\n\n    -- customer sales sequence\n    row_number() over (partition by paid_orders.customer_id order by paid_orders.order_id) as customer_sales_seq,\n\n    -- new vs returning customer\n    case \n      when (\n      rank() over (\n        partition by paid_orders.customer_id\n        order by paid_orders.order_placed_at, paid_orders.order_id\n        ) = 1\n      ) then 'new'\n    else 'return' end as nvsr,\n\n    -- customer lifetime value\n    sum(paid_orders.total_amount_paid) over (\n      partition by paid_orders.customer_id\n      order by paid_orders.order_placed_at\n      ) as customer_lifetime_value,\n\n    -- first day of sale\n    first_value(order_placed_at) over (\n      partition by paid_orders.customer_id\n      order by paid_orders.order_placed_at\n      ) as fdos\n    from paid_orders\n    left join customers on paid_orders.customer_id = customers.customer_id\n)\n\nselect * from final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jaffle_shop.stg_jaffle_shop__customers", "model.jaffle_shop.int_orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "marts", "core", "fct_customer_orders"], "unique_id": "model.jaffle_shop.fct_customer_orders", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "marts/core/fct_customer_orders.sql", "original_file_path": "models/marts/core/fct_customer_orders.sql", "name": "fct_customer_orders", "alias": "fct_customer_orders", "checksum": {"name": "sha256", "checksum": "e5d04c72373fe2bd40e5c6655ab75557f0e501e164e94d9b6f49d6f3f57e9be6"}, "tags": [], "refs": [["stg_jaffle_shop__customers"], ["int_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1690119079.975347}, "model.jaffle_shop.stg_jaffle_shop__customers": {"raw_sql": "with \n\nsource as (\n\n  select * from {{ source('jaffle_shop', 'customers') }}\n\n),\n\ntransformed as (\n\n  select \n\n    id as customer_id,\n    last_name as customer_last_name,\n    first_name as customer_first_name,\n    first_name || ' ' || last_name as full_name\n\n  from source\n\n)\n\nselect * from transformed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.jaffle_shop.jaffle_shop.customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "stg_jaffle_shop__customers"], "unique_id": "model.jaffle_shop.stg_jaffle_shop__customers", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/jaffle_shop/stg_jaffle_shop__customers.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop__customers.sql", "name": "stg_jaffle_shop__customers", "alias": "stg_jaffle_shop__customers", "checksum": {"name": "sha256", "checksum": "d6dc8db98398a826324d918041b19da388a15bd49d756f9829ea84261862a608"}, "tags": [], "refs": [], "sources": [["jaffle_shop", "customers"]], "description": "Staged customer data from our jaffle shop app.", "columns": {"customer_id": {"name": "customer_id", "description": "The primary key for customers.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jaffle_shop://models/staging/jaffle_shop/stg_jaffle_shop.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1690119080.095065}, "model.jaffle_shop.stg_jaffle_shop__orders": {"raw_sql": "with \n\nsource as (\n\n    select * from {{ source('jaffle_shop', 'orders') }}\n\n),\n\ntransformed as (\n\n  select\n\n    id as order_id,\n    user_id as customer_id,\n    order_date as order_placed_at,\n    status as order_status,\n\n    case \n        when status not in ('returned','return_pending') \n        then order_date\n    end as valid_order_date\n\n  from source\n\n)\n\nselect * from transformed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.jaffle_shop.jaffle_shop.orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "stg_jaffle_shop__orders"], "unique_id": "model.jaffle_shop.stg_jaffle_shop__orders", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/jaffle_shop/stg_jaffle_shop__orders.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop__orders.sql", "name": "stg_jaffle_shop__orders", "alias": "stg_jaffle_shop__orders", "checksum": {"name": "sha256", "checksum": "75704099a4898cfc2e090a8638c554fecbac73c47454e9468a32651490daf6e2"}, "tags": [], "refs": [], "sources": [["jaffle_shop", "orders"]], "description": "Staged order data from our jaffle shop app.", "columns": {"order_id": {"name": "order_id", "description": "Primary key for orders.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_status": {"name": "order_status", "description": "One of the following values: \n\n| status         | definition                                       |\n|----------------|--------------------------------------------------|\n| placed         | Order placed, not yet shipped                    |\n| shipped        | Order has been shipped, not yet been delivered   |\n| completed      | Order has been received by customers             |\n| return pending | Customer indicated they want to return this item |\n| returned       | Item has been returned                           |", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to stg_customers.customer_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jaffle_shop://models/staging/jaffle_shop/stg_jaffle_shop.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1690119080.0973015}, "model.jaffle_shop.stg_stripe__payments": {"raw_sql": "with \n\nsource as (\n\n    select * from {{ source('stripe', 'payment') }}\n\n),\n\ntransformed as (\n\n  select\n\n    id as payment_id,\n    orderid as order_id,\n    created as payment_created_at,\n    status as payment_status,\n    round(amount / 100.0, 2) as payment_amount\n\n  from source\n\n)\n\nselect * from transformed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.jaffle_shop.stripe.payment"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "staging", "stripe", "stg_stripe__payments"], "unique_id": "model.jaffle_shop.stg_stripe__payments", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/stripe/stg_stripe__payments.sql", "original_file_path": "models/staging/stripe/stg_stripe__payments.sql", "name": "stg_stripe__payments", "alias": "stg_stripe__payments", "checksum": {"name": "sha256", "checksum": "fc628d42eaa0e470bfaa02b0a4164e0180b851cde0957a1299fbe157a3e74343"}, "tags": [], "refs": [], "sources": [["stripe", "payment"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1690119079.9893322}, "model.jaffle_shop.stg_studielink__metadata": {"raw_sql": "select \"FileName\" as filename,\n       \"Peildatum\" as peildatum,\n       \"Volgnummer\" as volgnummer,\n       \"Weeknummer\" as weeknummer\n    \nfrom {{ source('studielink', 'metadata') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.jaffle_shop.studielink.metadata"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "staging", "studielink", "stg_studielink__metadata"], "unique_id": "model.jaffle_shop.stg_studielink__metadata", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__metadata.sql", "original_file_path": "models/staging/studielink/stg_studielink__metadata.sql", "name": "stg_studielink__metadata", "alias": "stg_studielink__metadata", "checksum": {"name": "sha256", "checksum": "843fde43a3ae1564ec3ca5653df396482ad659768712e3e09b821d3b7ed25d14"}, "tags": [], "refs": [], "sources": [["studielink", "metadata"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1690119079.9936068}, "model.jaffle_shop.stg_studielink__telbestanden": {"raw_sql": "select \"HBO_WO\" as soort_hoger_onderwijs_code,\n        \"Brincode\" as brin_code,\n        \"Brin_volgnr\"as brin_volgnr,\n        \"Isatcode\" as opleidingscode,\n        \"Type_HO\" as type_hoger_onderwijs_code,\n        \"Opl_vorm\" as opleidingsvorm_code,\n        \"Studiejaar\" as studiejaar,\n        \"Fixus\" as fixus,\n        \"Maand\" as maand_vanaf,\n        \"Herkomst\" as herkomst_code,\n        LOWER(\"Geslacht\") as geslacht_code,\n        \"meercode_V\" as meercode_v,\n        \"meercode_A\" as meercode_a,\n        \"Status\" as status_code,\n        \"Hogerejaars\" as hogerejaars_code,\n        \"Herinschrijving\" as herinschrijving_code,\n        \"1cHO_L\"  as soort_inschrijving_code,\n        \"1cHO_K\" as soort_inschrijving_code_wo,\n        \"Aantal\" as aantal,\n        \"FileName\" as filename\n\nfrom {{ source('studielink', 'telbestanden') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.jaffle_shop.studielink.telbestanden"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "staging", "studielink", "stg_studielink__telbestanden"], "unique_id": "model.jaffle_shop.stg_studielink__telbestanden", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.sql", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.sql", "name": "stg_studielink__telbestanden", "alias": "stg_studielink__telbestanden", "checksum": {"name": "sha256", "checksum": "43b5b7d6d5bf0b992c238e89a9a096e79ed955f2bbae318790f7f91d7a90a31b"}, "tags": [], "refs": [], "sources": [["studielink", "telbestanden"]], "description": "", "columns": {"soort_hoger_onderwijs_code": {"name": "soort_hoger_onderwijs_code", "description": "In dit veld wordt aangegeven of het verzoek voor een HBO of WO opleiding is. Dit is gebaseerd op de Isatcode uit de referentietabel ONDWyyyynnn (onderwijsgegevens). Deze tabel bevat de CROHO gegevens zoals DUO deze aan Studielink levert. Samen met andere referentiebestanden, wordt deze tabel op de Downloadserver in de map \u2018Downloadbestand, submap \u2018Referentietabellen\u2019 gepubliceerd.\n\n## Oorspronkelijke naam van kolom: HBO_WO\nMogelijke waarden:\n    H. \u2013 HBO opleiding.\n    W. \u2013 WO opleiding", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brin_code": {"name": "brin_code", "description": "In dit veld staat de Brincode van de instelling volgens de CROHO-gegevens. Deze informatie is\ndirect afkomstig van de Studielink database kopie.\n\nBrincode volgens CROHO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brin_volgnr": {"name": "brin_volgnr", "description": "Dit is de vestigingslocatie van de instellingen waar de opleiding gegeven wordt (volgens CROHO). Brinvolgnummer volgens CROHO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opleidingscode": {"name": "opleidingscode", "description": "In dit veld staat de Isatcode, ook wel de opleidingscode genoemd, volgens het CROHO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_hoger_onderwijs_code": {"name": "type_hoger_onderwijs_code", "description": "Dit is het type hoger onderwijs van de opleiding volgens de gegevens in het CROHO. Dit is gebaseerd op de Isatcode uit de referentietabel ONDWyyyynnn. Deze tabel bevat de CROHO gegevens zoals DUO deze aan Studielink levert. Samen met andere referentiebestanden, wordt deze tabel op de Downloadserver in de map \u2018Downloadbestand, submap \u2018Referentietabellen\u2019 gepubliceerd.\n\nMogelijke waarden:\n    A = Associate Degree.\n    B = Bachelor.\n    M = Master.\n    O = Ongedeelde opleiding.\n    P = Post initi\u00eble master.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opleidingsvorm_code": {"name": "opleidingsvorm_code", "description": "Dit veld geeft de geselecteerde opleidingsvorm (Voltijd, Deeltijd of Duaal) weer van de opleiding waarvoor een inschrijvingsverzoek is ingediend. De mogelijke vormen zijn vastgelegd in het CROHO.\n\nMogelijke waarden:\n    1 \u2013 voltijd.\n    2 \u2013 deeltijd.\n    3 \u2013 duaal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "studiejaar": {"name": "studiejaar", "description": "In dit veld wordt het studiejaar genoemd waarop het inschrijfverzoek betrekking heeft. Dit kan zowel het lopende als het komende studiejaar. Dit studiejaar wordt aangegeven met het eerste\njaartal van dit studiejaar. Dus het studiejaar 2013-2014 wordt weergegeven als 2013.\n\nBijvoorbeeld 2016 voor het studiejaar 2016-2017.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fixus": {"name": "fixus", "description": "Dit veld geeft aan of er voor de betreffende opleiding een numerus fixus van toepassing is. \nMogelijke waarden:\n    N \u2013 geen fixus.\n    J \u2013 wel fixus.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maand_vanaf": {"name": "maand_vanaf", "description": "Dit veld geeft de maand aan waarin de student wil starten met zijn studie. Deze gegevens kunnen gecorrigeerd zijn door de instelling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "herkomst_code": {"name": "herkomst_code", "description": "Het veld \u201cHerkomst\u201d geeft aan of een student uit Nederland, een EER-land, een niet-EER land of een onbekend land komt. Het veld wordt gevuld conform de nationaliteitscodes zoals DUO die verstrekt (de tabel op de volgende pagina geeft hiervan een samenvatting weer). De herkomst van een student wordt bepaald, gebaseerd op de twee geregistreerde nationaliteitscodes in Studielink.\nDe beslisboom ziet er als volgt uit:\nALS 1 van de 2 velden heeft de waarde 1 (Nederlander)\n    DAN wordt het veld herkomst gevuld met een \u201cN\u201d\n    ANDERS\n        ALS 1 van de 2 velden heeft een waarde 2 (EER-burger), volgens de EER-lijst\n        DAN wordt het veld herkomst gevuld met een \u201cE\u201d\n        ANDERS\n            ALS 1 van de 2 velden heeft een waarde 3 (Rest van de nationaliteiten)\n            DAN wordt het veld herkomst gevuld met een \u201cR\u201d\n            ANDERS\n                DAN wordt het veld gevuld met een \u201cO\u201d (Onbekend), volgens de EER-lijst\n\nMogelijke waarden:\n    N \u2013 Nederlander.\n    E \u2013 EER-burger.\n    R \u2013 niet EER-burger.\n    O \u2013 onbekend", "meta": {}, "data_type": null, "quote": null, "tags": []}, "geslacht_code": {"name": "geslacht_code", "description": "Gebaseerd op de gegevens uit de kopie van de Studielink-database wordt dit veld ingevuld.\nMogelijke waarden:\n    M \u2013 Man\n    V \u2013 Vrouw\n    O - Onbekend", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meercode_v": {"name": "meercode_v", "description": "Het telbestand is opgebouwd vanuit een wekelijkse Studielink-FOTO. In dit bestand wordt, per studiejaar, geteld hoeveel inschrijfverzoeken / inschrijvingen een student heeft en hoeveel\ninschrijfverzoeken geannuleerd zijn. Deze informatie wordt weergegeven in de velden, respectievelijk, \u2018Meercode_V\u2019 en \u2018Meercode_A\u2019.\n\nTijdens het opzetten van het telbestand wordt elk uniek verzoek in Studielink aan de hand van de status vertaald naar de verschillende meercodes. In de praktijk betekent dit dat wanneer een verzoek in week x de status V had, vermeld werd onder \u2018Meercode_V\u2019. Als je kijkt naar week x+1 kan dit verzoek de status A hebben, dan wordt hij vermeld onder \u2018Meerdoce_A\u2019 en is verdwenen uit \u2018Meercode_V\u2019.\n\n## Het veld \"Meercode_V\"\nDit veld geeft het aantal inschrijfverzoeken/inschrijvingen per student aan; hieronder valt elke status behalve de status A. Zie het onderstaande voorbeeld:\n\n## Het veld \"meercode_a\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meercode_a": {"name": "meercode_a", "description": "Het telbestand is opgebouwd vanuit een wekelijkse Studielink-FOTO. In dit bestand wordt, per studiejaar, geteld hoeveel inschrijfverzoeken / inschrijvingen een student heeft en hoeveel\ninschrijfverzoeken geannuleerd zijn. Deze informatie wordt weergegeven in de velden, respectievelijk, \u2018Meercode_V\u2019 en \u2018Meercode_A\u2019.\n\nTijdens het opzetten van het telbestand wordt elk uniek verzoek in Studielink aan de hand van de status vertaald naar de verschillende meercodes. In de praktijk betekent dit dat wanneer een verzoek in week x de status V had, vermeld werd onder \u2018Meercode_V\u2019. Als je kijkt naar week x+1 kan dit verzoek de status A hebben, dan wordt hij vermeld onder \u2018Meerdoce_A\u2019 en is verdwenen uit \u2018Meercode_V\u2019.\n\n## Het veld \"Meercode_V\"\nDit veld geeft het aantal inschrijfverzoeken/inschrijvingen per student aan; hieronder valt elke status behalve de status A. Zie het onderstaande voorbeeld:\n\n## Het veld \"meercode_a\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "Het veld \u201cStatus\u201d geeft aan welke status het inschrijfverzoek heeft, volgens de volgende codering:\n- Code V staat hierbij voor verzoek.\n- Code A voor annulering / afwijzing.\n- Code U voor uitschrijving / staken.\n- Code I voor inschrijving.\n\nIn de onderstaande tabel worden de verschillende scenario's voor de hierboven staande statussen omschreven. In de kolommen Meercode V en Meercode A wordt aangegeven bij welke status een inschrijfverzoek wordt betrokken in de berekening van het aantal in de betreffende kolom. Hieruit kun je concluderen dat alleen de status A (annulering/afwijzing) betrokken wordt in de berekening voor Meercode A, terwijl de overige statussen betrokken zijn bij de berekening van de Meercode V. In de migratie van de data zijn de velden uit de oude database naar de nieuwe database op de volgende manier overgezet.\n\n    Oude status HNS status\n    CANCELLED G\n    CEASED S\n    PLACEACCEPTED V\n    PLACEELAPSED V\n    PLACEOFFERED V\n    PLACEREFUSED V\n    REGISTERED I\n    REJECTED R\n    REQCANCELLATION I\n    REQREGISTRATION V\n    REQROLLINGOUT I\n    ROLLEDOUT U\n    WAITPLACEMENT V\n    WAITRANKING V\n    WITHDRAWN G\n\nDe statussen voor de telbestanden zijn geaggregeerd op basis van onderstaande mapping.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hogerejaars_code": {"name": "hogerejaars_code", "description": "In Studielink kan de student aangeven of hij wil starten met zijn opleiding als hogerejaars. De instelling moet hier toestemming voor geven. De instelling kan dit veld ook veranderen, als de student bijvoorbeeld niet toegelaten wordt tot een hoger studiejaar, of omgekeerd als de instelling besluit dat een student mag instromen in een hoger studiejaar.\nDe impact van de mogelijkheid om aan te melden als hogerejaars betekent dat niet iedere nieuwe aanmelding automatisch garandeert dat een student in het eerste studiejaar van de opleiding begint. Voor de herinschrijvers betekent dit dat het grote merendeel als een hogerejaars student wordt weergegeven. Er zijn echter uitzonderingsituaties te bedenken dat een herinschrijver toch een eerstejaars student is, bijvoorbeeld in het geval van een tussentijdse instroom. \n\nMogelijke waarden:\n    J \u2013 instroom in een hoger studiejaar.\n    N \u2013 instroom in het eerste studiejaar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "herinschrijving_code": {"name": "herinschrijving_code", "description": "Instellingen gaan op verschillende manieren om met de herinschrijving. Een aantal instellingen regelen een herinschrijving vanuit hun SIS, waardoor de herinschrijving als een nieuw verzoek tot inschrijving, met een instroom in een hoger studiejaar, in Studielink terecht kan komen. Om in het telbestand de herinschrijfverzoeken goed te kunnen onderscheiden worden een aantal stappen gezet:\n - Er wordt eerst gekeken of de student via Studielink een herinschrijfverzoek (kenmerk\n'Herinschrijving Studielink' heeft ingevoerd. In dat geval is de status in het veld\n'Herinschrijving' automatisch J(a).\n - Per student wordt, volgens onderstaande beslisboom, in het BRON-OD gekeken, of de student het studiejaar, voorafgaande aan het studiejaar waarvoor een verzoek gedaan wordt, een actieve inschrijving heeft in het BRON-OD bij dezelfde instelling en opleiding. Zo ja (de waarde OD is 3) dan wordt de status herinschrijving = J(a).\n\nBeslisboom BRON-OD:\n\n1. Komt de persoon afkomstig uit het SL-bestand voor in het actuele OD?\n    1. Nee >> waarde OD = 1.\n    1. Ja >> volgende vraag.\n1. Komt de persoon afkomstig uit het SL-bestand voor in OD met dezelfde Brin- en Isatcode?\n    1. Nee >> waarde OD = 2.\n    1. Ja >> volgende vraag.\n3. Komt de persoon afkomstig uit het SL-bestand met dezelfde Brin- en Isatcode voor in OD met het veld \u2018datum-einde-studie\u2019 gevuld met een datum dat eerder is dan de draaidatum (het moment dat het telbestand is aangemaakt)?\n    1. Nee >> waarde OD = 3.\n    1. Ja >> waarde OD = 4\n\nHet veld \u201cHerinschrijving\u201d wordt alleen op basis van bovenstaande regels door BRON-OD aangepast als het gaat om een inschrijving die start in de maanden september en oktober (maand 9 en 10). \n\nIn verband met de migratie naar HNS geldt de volgende toelichting:\n- De telbestanden over 2018 zijn tot en met 08-10-2018 (V54) gegenereerd door CACI. In deze bestanden is het veld \u2018Herinschrijving Studielink\u2019 wel gevuld.\n- De telbestanden over 2018 zijn vanaf 22-10-2018 (V56) gegenereerd door QDelft. In deze\ntelbestanden zal het veld \u2018Herinschrijving Studielink\u2019 gevuld zijn met de waarde \u2018O\u2019 van\nonbekend. Wel zal de koppeling met BRON-OD (zie eerder beschreven beslisboom) worden\ntoegepast.\n- Vanaf begin 2019 zal in HNS de functionaliteit m.b.t. herinschrijvingen ontwikkeld worden. Dit betekent dat de eigenschap 'H erinschrijving Studielink\u2019 voor studiejaar 2019 wel vanuit Studielink beschikbaar zal zijn.\n\n\nMogelijke waarden:\n    J.\n    N.\n    O.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "soort_inschrijving_code": {"name": "soort_inschrijving_code", "description": "In het telbestand zijn 2 kolommen opgenomen met een indicatie over de studentgegevens in het 1cijferHO-bestand bij DUO. In het 1cijferHO-bestand staat de geschiedenis van de verschillende studenten. Dit bestand wordt \u00e9\u00e9n keer per jaar aangevuld met de nieuwe hoger onderwijsstatus per 1 oktober van dat studiejaar. Deze gegevens worden in het telbestand vertaald naar een getal dat de geschiedenis van een student in het hoger onderwijs weergeeft. Bijvoorbeeld: begint de student aan zijn eerste opleiding in het hoger onderwijs, of heeft hij in het verleden al andere opleidingen gevolgd?\n\nVoor het 1cHO zijn er de volgende 2 verschillende kolommen; de 1cHO_L en 1cHO_K kolom.\n1. Het veld 1cHO_L (de lange reeks is voor het HBO), kijkt naar de volgende gegevens:\n    1. Is de student nieuw in het Hoger Onderwijs?\n    1. Is de student nieuw in het soort Hoger Onderwijs (HBO / WO)?\n    1. Is de student nieuw in de type Hoger Onderwijs (bachelor, master)?\n    1. Is de student nieuw bij de instelling?\n    1. Is de student nieuw bij de opleiding?\nDit houdt in dat de 1cHO_L de waardes 1, 2, 3, 4, 5, of 6 kan hebben\n\n1. Het veld 1cHO_K (de korte reeks voor het WO), kijkt naar de volgende gegevens:\n    1. Is de student nieuw in het Hoger Onderwijs?\n    1. Is de student nieuw in het soort Hoger Onderwijs (HBO / WO)?\n    1. Is de student nieuw bij de instelling?\n    1. Is de student nieuw bij de opleiding?\nDit veld kijkt dus niet naar het type Hoger Onderwijs (waarde 3). Dat betekent dat de 1cHO_K. de volgende waardes kan hebben: 1, 2, 4, 5, of 6.\n\nVoor het vast stellen van de 1cijferHO waarde in het telbestand, bestaat de volgende beslisboom.\n\n## TODO: toevoegen beslisboom uit documentatie Studielink\nOorspronkelijke naam kolom 1cho_L", "meta": {}, "data_type": null, "quote": null, "tags": []}, "soort_inschrijving_code_wo": {"name": "soort_inschrijving_code_wo", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "aantal": {"name": "aantal", "description": "Dit veld geeft het aantal inschrijfverzoeken / inschrijvingen weer, die voldoen aan alle velden in de betreffende regel. Zie onderstaand voorbeeld:\n## TODO: toevoegen informatie uit documentatie Studielink.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dubbel_inschrijvingen": {"name": "dubbel_inschrijvingen", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gewogen_aantal": {"name": "gewogen_aantal", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "filename": {"name": "filename", "description": "Naam van csv-bestand waar data uit afkomstig is.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jaffle_shop://models/staging/studielink/_stg_studielink.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1690119080.1535347}, "test.jaffle_shop.assert_positive_total_for_payments": {"raw_sql": "WITH payments AS (\n    SELECT\n        *\n    FROM\n        {{ ref ('stg_stripe__payments') }}\n),\ntest_data AS (\n    SELECT\n        order_id,\n        sum(payment_amount) AS total_amount\nFROM\n    payments\nGROUP BY\n    1\n)\nSELECT\n    *\nFROM\n    test_data\nWHERE\n    total_amount < 0", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.jaffle_shop.stg_stripe__payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "assert_positive_total_for_payments"], "unique_id": "test.jaffle_shop.assert_positive_total_for_payments", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "assert_positive_total_for_payments.sql", "original_file_path": "tests/assert_positive_total_for_payments.sql", "name": "assert_positive_total_for_payments", "alias": "assert_positive_total_for_payments", "checksum": {"name": "sha256", "checksum": "c4898aa6b3df743df41a62b6012f45cd0867345344e6f495174d773a5e254ef2"}, "tags": [], "refs": [["stg_stripe__payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/tests/assert_positive_total_for_payments.sql", "build_path": "target/run/jaffle_shop/tests/assert_positive_total_for_payments.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.01236, "compiled_sql": "WITH payments AS (\n    SELECT\n        *\n    FROM\n        \"raw\".\"dev\".\"stg_stripe__payments\"\n),\ntest_data AS (\n    SELECT\n        order_id,\n        sum(payment_amount) AS total_amount\nFROM\n    payments\nGROUP BY\n    1\n)\nSELECT\n    *\nFROM\n    test_data\nWHERE\n    total_amount < 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.jaffle_shop.assert_positive_total_for_payments_daily": {"raw_sql": "WITH payments AS (\n    SELECT\n        *\n    FROM\n        {{ ref ('stg_stripe__payments') }}\n    WHERE\n        payment_created_at = '{{ var (\"date\") }}'\n),\ntest_data AS (\n    SELECT\n        order_id,\n        sum(payment_amount) AS total_amount\nFROM\n    payments\nGROUP BY\n    1\n)\nSELECT\n    *\nFROM\n    test_data\nWHERE\n    total_amount < 0", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.jaffle_shop.stg_stripe__payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "assert_positive_total_for_payments_daily"], "unique_id": "test.jaffle_shop.assert_positive_total_for_payments_daily", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "assert_positive_total_for_payments_daily.sql", "original_file_path": "tests/assert_positive_total_for_payments_daily.sql", "name": "assert_positive_total_for_payments_daily", "alias": "assert_positive_total_for_payments_daily", "checksum": {"name": "sha256", "checksum": "bd8f14b8e54f9afdbd7faada9003b911d13e4ea871213a5561bfe4b921364881"}, "tags": [], "refs": [["stg_stripe__payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/tests/assert_positive_total_for_payments_daily.sql", "build_path": "target/run/jaffle_shop/tests/assert_positive_total_for_payments_daily.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.0164359, "compiled_sql": "WITH payments AS (\n    SELECT\n        *\n    FROM\n        \"raw\".\"dev\".\"stg_stripe__payments\"\n    WHERE\n        payment_created_at = ' 2023-07-22 '\n),\ntest_data AS (\n    SELECT\n        order_id,\n        sum(payment_amount) AS total_amount\nFROM\n    payments\nGROUP BY\n    1\n)\nSELECT\n    *\nFROM\n    test_data\nWHERE\n    total_amount < 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "seed.jaffle_shop.stg_studielink__geslacht": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "stg_studielink__geslacht"], "unique_id": "seed.jaffle_shop.stg_studielink__geslacht", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "stg_studielink__geslacht.csv", "original_file_path": "seeds/stg_studielink__geslacht.csv", "name": "stg_studielink__geslacht", "alias": "stg_studielink__geslacht", "checksum": {"name": "sha256", "checksum": "39c828e570f7ff46334d9b6e2b9eaed57cdea176a7dafea618d7c16fd31453ec"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1690119080.0323298}, "seed.jaffle_shop.stg_studielink__herkomst": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "stg_studielink__herkomst"], "unique_id": "seed.jaffle_shop.stg_studielink__herkomst", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "stg_studielink__herkomst.csv", "original_file_path": "seeds/stg_studielink__herkomst.csv", "name": "stg_studielink__herkomst", "alias": "stg_studielink__herkomst", "checksum": {"name": "sha256", "checksum": "7056aa67ee811b04fb617fb8ec4a1304ca80bf76254799090b28a8e579de615b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1690119080.034571}, "seed.jaffle_shop.stg_studielink__opleidingsvorm": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "stg_studielink__opleidingsvorm"], "unique_id": "seed.jaffle_shop.stg_studielink__opleidingsvorm", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "stg_studielink__opleidingsvorm.csv", "original_file_path": "seeds/stg_studielink__opleidingsvorm.csv", "name": "stg_studielink__opleidingsvorm", "alias": "stg_studielink__opleidingsvorm", "checksum": {"name": "sha256", "checksum": "3b8723b7dd798f2963e4fe205205435a916631299bb70e281461868977d7c9a2"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1690119080.0364735}, "seed.jaffle_shop.stg_studielink__soort_hoger_onderwijs": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "stg_studielink__soort_hoger_onderwijs"], "unique_id": "seed.jaffle_shop.stg_studielink__soort_hoger_onderwijs", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "stg_studielink__soort_hoger_onderwijs.csv", "original_file_path": "seeds/stg_studielink__soort_hoger_onderwijs.csv", "name": "stg_studielink__soort_hoger_onderwijs", "alias": "stg_studielink__soort_hoger_onderwijs", "checksum": {"name": "sha256", "checksum": "aa282d82cf76551f82199e457a20e05d89d63a2ffaefc481c72de3c86bba2988"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1690119080.038409}, "seed.jaffle_shop.stg_studielink__soort_inschrijving": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "stg_studielink__soort_inschrijving"], "unique_id": "seed.jaffle_shop.stg_studielink__soort_inschrijving", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "stg_studielink__soort_inschrijving.csv", "original_file_path": "seeds/stg_studielink__soort_inschrijving.csv", "name": "stg_studielink__soort_inschrijving", "alias": "stg_studielink__soort_inschrijving", "checksum": {"name": "sha256", "checksum": "6e3ea38b2786bc78fb97a850559dd45437ad04ee1c24a8cc240c495066a8e1f4"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1690119080.0403817}, "seed.jaffle_shop.stg_studielink__status": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "stg_studielink__status"], "unique_id": "seed.jaffle_shop.stg_studielink__status", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "stg_studielink__status.csv", "original_file_path": "seeds/stg_studielink__status.csv", "name": "stg_studielink__status", "alias": "stg_studielink__status", "checksum": {"name": "sha256", "checksum": "cb957df344cd14e083987326d9aabc10bd4f28de856215bb2132dab20af45375"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1690119080.0423698}, "seed.jaffle_shop.stg_studielink__type_hoger_onderwijs": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "dev", "fqn": ["jaffle_shop", "stg_studielink__type_hoger_onderwijs"], "unique_id": "seed.jaffle_shop.stg_studielink__type_hoger_onderwijs", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "stg_studielink__type_hoger_onderwijs.csv", "original_file_path": "seeds/stg_studielink__type_hoger_onderwijs.csv", "name": "stg_studielink__type_hoger_onderwijs", "alias": "stg_studielink__type_hoger_onderwijs", "checksum": {"name": "sha256", "checksum": "7da74b50c7a67c3a63ce9f6162a89739891e93036f2491753261ccf254d68fa5"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1690119080.044454}, "test.jaffle_shop.unique_stg_jaffle_shop__customers_customer_id.231d91af86": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_jaffle_shop__customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.jaffle_shop.stg_jaffle_shop__customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "unique_stg_jaffle_shop__customers_customer_id"], "unique_id": "test.jaffle_shop.unique_stg_jaffle_shop__customers_customer_id.231d91af86", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "unique_stg_jaffle_shop__customers_customer_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "unique_stg_jaffle_shop__customers_customer_id", "alias": "unique_stg_jaffle_shop__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jaffle_shop__customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_jaffle_shop__customers_customer_id.sql", "build_path": "target/run/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_jaffle_shop__customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.104993, "compiled_sql": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"dev\".\"stg_jaffle_shop__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_jaffle_shop__customers"}, "test.jaffle_shop.not_null_stg_jaffle_shop__customers_customer_id.b4343d8610": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_jaffle_shop__customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.jaffle_shop.stg_jaffle_shop__customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "not_null_stg_jaffle_shop__customers_customer_id"], "unique_id": "test.jaffle_shop.not_null_stg_jaffle_shop__customers_customer_id.b4343d8610", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "not_null_stg_jaffle_shop__customers_customer_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "not_null_stg_jaffle_shop__customers_customer_id", "alias": "not_null_stg_jaffle_shop__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jaffle_shop__customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_jaffle_shop__customers_customer_id.sql", "build_path": "target/run/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_jaffle_shop__customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.1071591, "compiled_sql": "\n    \n    \n\n\n\nselect customer_id\nfrom \"raw\".\"dev\".\"stg_jaffle_shop__customers\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_jaffle_shop__customers"}, "test.jaffle_shop.unique_stg_jaffle_shop__orders_order_id.7f899b6afe": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_jaffle_shop__orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.jaffle_shop.stg_jaffle_shop__orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "unique_stg_jaffle_shop__orders_order_id"], "unique_id": "test.jaffle_shop.unique_stg_jaffle_shop__orders_order_id.7f899b6afe", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "unique_stg_jaffle_shop__orders_order_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "unique_stg_jaffle_shop__orders_order_id", "alias": "unique_stg_jaffle_shop__orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jaffle_shop__orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_jaffle_shop__orders_order_id.sql", "build_path": "target/run/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/unique_stg_jaffle_shop__orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.109071, "compiled_sql": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"dev\".\"stg_jaffle_shop__orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.stg_jaffle_shop__orders"}, "test.jaffle_shop.not_null_stg_jaffle_shop__orders_order_id.aad0410d08": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_jaffle_shop__orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.jaffle_shop.stg_jaffle_shop__orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "not_null_stg_jaffle_shop__orders_order_id"], "unique_id": "test.jaffle_shop.not_null_stg_jaffle_shop__orders_order_id.aad0410d08", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "not_null_stg_jaffle_shop__orders_order_id.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "not_null_stg_jaffle_shop__orders_order_id", "alias": "not_null_stg_jaffle_shop__orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jaffle_shop__orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_jaffle_shop__orders_order_id.sql", "build_path": "target/run/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/not_null_stg_jaffle_shop__orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.1111763, "compiled_sql": "\n    \n    \n\n\n\nselect order_id\nfrom \"raw\".\"dev\".\"stg_jaffle_shop__orders\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.stg_jaffle_shop__orders"}, "test.jaffle_shop.accepted_values_stg_jaffle_shop__orders_order_status__completed__shipped__returned__return_pending__placed.66bdbafd6b": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_jaffle_sho_016d37c576e20b0d30ec2e634d2dac96\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["completed", "shipped", "returned", "return_pending", "placed"], "column_name": "order_status", "model": "{{ get_where_subquery(ref('stg_jaffle_shop__orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.jaffle_shop.stg_jaffle_shop__orders"]}, "config": {"enabled": true, "alias": "accepted_values_stg_jaffle_sho_016d37c576e20b0d30ec2e634d2dac96", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "accepted_values_stg_jaffle_shop__orders_order_status__completed__shipped__returned__return_pending__placed"], "unique_id": "test.jaffle_shop.accepted_values_stg_jaffle_shop__orders_order_status__completed__shipped__returned__return_pending__placed.66bdbafd6b", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "accepted_values_stg_jaffle_sho_016d37c576e20b0d30ec2e634d2dac96.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "accepted_values_stg_jaffle_shop__orders_order_status__completed__shipped__returned__return_pending__placed", "alias": "accepted_values_stg_jaffle_sho_016d37c576e20b0d30ec2e634d2dac96", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jaffle_shop__orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/accepted_values_stg_jaffle_sho_016d37c576e20b0d30ec2e634d2dac96.sql", "build_path": "target/run/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/accepted_values_stg_jaffle_sho_016d37c576e20b0d30ec2e634d2dac96.sql", "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_jaffle_sho_016d37c576e20b0d30ec2e634d2dac96"}, "created_at": 1690119080.113077, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        order_status as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"dev\".\"stg_jaffle_shop__orders\"\n    group by order_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'completed','shipped','returned','return_pending','placed'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_status", "file_key_name": "models.stg_jaffle_shop__orders"}, "test.jaffle_shop.relationships_stg_jaffle_shop__orders_customer_id__customer_id__ref_stg_jaffle_shop__customers_.3e222ebf00": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_jaffle_shop__69c2006accf24d593d7f144684ebb92c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_jaffle_shop__customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_jaffle_shop__orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.jaffle_shop.stg_jaffle_shop__customers", "model.jaffle_shop.stg_jaffle_shop__orders"]}, "config": {"enabled": true, "alias": "relationships_stg_jaffle_shop__69c2006accf24d593d7f144684ebb92c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "relationships_stg_jaffle_shop__orders_customer_id__customer_id__ref_stg_jaffle_shop__customers_"], "unique_id": "test.jaffle_shop.relationships_stg_jaffle_shop__orders_customer_id__customer_id__ref_stg_jaffle_shop__customers_.3e222ebf00", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "relationships_stg_jaffle_shop__69c2006accf24d593d7f144684ebb92c.sql", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.yml", "name": "relationships_stg_jaffle_shop__orders_customer_id__customer_id__ref_stg_jaffle_shop__customers_", "alias": "relationships_stg_jaffle_shop__69c2006accf24d593d7f144684ebb92c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jaffle_shop__customers"], ["stg_jaffle_shop__orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/relationships_stg_jaffle_shop__69c2006accf24d593d7f144684ebb92c.sql", "build_path": "target/run/jaffle_shop/models/staging/jaffle_shop/stg_jaffle_shop.yml/relationships_stg_jaffle_shop__69c2006accf24d593d7f144684ebb92c.sql", "deferred": false, "unrendered_config": {"alias": "relationships_stg_jaffle_shop__69c2006accf24d593d7f144684ebb92c"}, "created_at": 1690119080.1289902, "compiled_sql": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"raw\".\"dev\".\"stg_jaffle_shop__orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"raw\".\"dev\".\"stg_jaffle_shop__customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_jaffle_shop__orders"}, "test.jaffle_shop.source_unique_jaffle_shop_customers_id.2777a7933e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.jaffle_shop.jaffle_shop.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "source_unique_jaffle_shop_customers_id"], "unique_id": "test.jaffle_shop.source_unique_jaffle_shop_customers_id.2777a7933e", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "source_unique_jaffle_shop_customers_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "source_unique_jaffle_shop_customers_id", "alias": "source_unique_jaffle_shop_customers_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["jaffle_shop", "customers"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_customers_id.sql", "build_path": "target/run/jaffle_shop/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_customers_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.1579187, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"jaffle_shop\".\"customers\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.jaffle_shop"}, "test.jaffle_shop.source_not_null_jaffle_shop_customers_id.50aa22178f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.jaffle_shop.jaffle_shop.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "source_not_null_jaffle_shop_customers_id"], "unique_id": "test.jaffle_shop.source_not_null_jaffle_shop_customers_id.50aa22178f", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "source_not_null_jaffle_shop_customers_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "source_not_null_jaffle_shop_customers_id", "alias": "source_not_null_jaffle_shop_customers_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["jaffle_shop", "customers"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_customers_id.sql", "build_path": "target/run/jaffle_shop/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_customers_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.1599126, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"raw\".\"jaffle_shop\".\"customers\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.jaffle_shop"}, "test.jaffle_shop.source_unique_jaffle_shop_orders_id.8a425b2fba": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.jaffle_shop.jaffle_shop.orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "source_unique_jaffle_shop_orders_id"], "unique_id": "test.jaffle_shop.source_unique_jaffle_shop_orders_id.8a425b2fba", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "source_unique_jaffle_shop_orders_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "source_unique_jaffle_shop_orders_id", "alias": "source_unique_jaffle_shop_orders_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["jaffle_shop", "orders"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_orders_id.sql", "build_path": "target/run/jaffle_shop/models/staging/jaffle_shop/src_jaffle_shop.yml/source_unique_jaffle_shop_orders_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.162112, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"jaffle_shop\".\"orders\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.jaffle_shop"}, "test.jaffle_shop.source_not_null_jaffle_shop_orders_id.f924998b13": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('jaffle_shop', 'orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.jaffle_shop.jaffle_shop.orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "jaffle_shop", "source_not_null_jaffle_shop_orders_id"], "unique_id": "test.jaffle_shop.source_not_null_jaffle_shop_orders_id.f924998b13", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "source_not_null_jaffle_shop_orders_id.sql", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "source_not_null_jaffle_shop_orders_id", "alias": "source_not_null_jaffle_shop_orders_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["jaffle_shop", "orders"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_orders_id.sql", "build_path": "target/run/jaffle_shop/models/staging/jaffle_shop/src_jaffle_shop.yml/source_not_null_jaffle_shop_orders_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.1640542, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"raw\".\"jaffle_shop\".\"orders\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.jaffle_shop"}, "test.jaffle_shop.source_unique_stripe_payment_id.3b7989ce64": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('stripe', 'payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.jaffle_shop.stripe.payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "stripe", "source_unique_stripe_payment_id"], "unique_id": "test.jaffle_shop.source_unique_stripe_payment_id.3b7989ce64", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "source_unique_stripe_payment_id.sql", "original_file_path": "models/staging/stripe/src_stripe.yml", "name": "source_unique_stripe_payment_id", "alias": "source_unique_stripe_payment_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["stripe", "payment"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/stripe/src_stripe.yml/source_unique_stripe_payment_id.sql", "build_path": "target/run/jaffle_shop/models/staging/stripe/src_stripe.yml/source_unique_stripe_payment_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.1663382, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"stripe\".\"payment\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.stripe"}, "test.jaffle_shop.source_not_null_stripe_payment_id.f33f317f6c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('stripe', 'payment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["source.jaffle_shop.stripe.payment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "raw", "schema": "dev_dbt_test__audit", "fqn": ["jaffle_shop", "staging", "stripe", "source_not_null_stripe_payment_id"], "unique_id": "test.jaffle_shop.source_not_null_stripe_payment_id.f33f317f6c", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "source_not_null_stripe_payment_id.sql", "original_file_path": "models/staging/stripe/src_stripe.yml", "name": "source_not_null_stripe_payment_id", "alias": "source_not_null_stripe_payment_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["stripe", "payment"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jaffle_shop/models/staging/stripe/src_stripe.yml/source_not_null_stripe_payment_id.sql", "build_path": "target/run/jaffle_shop/models/staging/stripe/src_stripe.yml/source_not_null_stripe_payment_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1690119080.1682234, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"raw\".\"stripe\".\"payment\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "sources.stripe"}}, "sources": {"source.jaffle_shop.jaffle_shop.customers": {"fqn": ["jaffle_shop", "staging", "jaffle_shop", "jaffle_shop", "customers"], "database": "raw", "schema": "jaffle_shop", "unique_id": "source.jaffle_shop.jaffle_shop.customers", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "customers", "source_name": "jaffle_shop", "source_description": "A clone of a Postgres application database.", "loader": "", "identifier": "customers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw customers data.", "columns": {"id": {"name": "id", "description": "Primary key for customers.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"raw\".\"jaffle_shop\".\"customers\"", "created_at": 1690119080.1609986}, "source.jaffle_shop.jaffle_shop.orders": {"fqn": ["jaffle_shop", "staging", "jaffle_shop", "jaffle_shop", "orders"], "database": "raw", "schema": "jaffle_shop", "unique_id": "source.jaffle_shop.jaffle_shop.orders", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "original_file_path": "models/staging/jaffle_shop/src_jaffle_shop.yml", "name": "orders", "source_name": "jaffle_shop", "source_description": "A clone of a Postgres application database.", "loader": "", "identifier": "orders", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_etl_loaded_at", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "Raw orders data.", "columns": {"id": {"name": "id", "description": "Primary key for orders.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"raw\".\"jaffle_shop\".\"orders\"", "created_at": 1690119080.165101}, "source.jaffle_shop.stripe.payment": {"fqn": ["jaffle_shop", "staging", "stripe", "stripe", "payment"], "database": "raw", "schema": "stripe", "unique_id": "source.jaffle_shop.stripe.payment", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "models/staging/stripe/src_stripe.yml", "original_file_path": "models/staging/stripe/src_stripe.yml", "name": "payment", "source_name": "stripe", "source_description": "", "loader": "", "identifier": "payment", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_batched_at", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "Primary key for payments.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"raw\".\"stripe\".\"payment\"", "created_at": 1690119080.1691916}, "source.jaffle_shop.studielink.metadata": {"fqn": ["jaffle_shop", "staging", "studielink", "studielink", "metadata"], "database": "raw", "schema": "public", "unique_id": "source.jaffle_shop.studielink.metadata", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "models/staging/studielink/_src_studielink.yml", "original_file_path": "models/staging/studielink/_src_studielink.yml", "name": "metadata", "source_name": "studielink", "source_description": "", "loader": "", "identifier": "metadata", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"raw\".\"public\".\"metadata\"", "created_at": 1690119080.1693547}, "source.jaffle_shop.studielink.telbestanden": {"fqn": ["jaffle_shop", "staging", "studielink", "studielink", "telbestanden"], "database": "raw", "schema": "public", "unique_id": "source.jaffle_shop.studielink.telbestanden", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "models/staging/studielink/_src_studielink.yml", "original_file_path": "models/staging/studielink/_src_studielink.yml", "name": "telbestanden", "source_name": "studielink", "source_description": "", "loader": "", "identifier": "telbestanden", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"raw\".\"public\".\"telbestanden\"", "created_at": 1690119080.1694965}}, "macros": {"macro.jaffle_shop.cents_to_dollars": {"unique_id": "macro.jaffle_shop.cents_to_dollars", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "macros/cents_to_dollars.sql", "original_file_path": "macros/cents_to_dollars.sql", "name": "cents_to_dollars", "macro_sql": "{% macro cents_to_dollars(column_name, decimal_places=2) -%}\n    round( 1.0 * {{ column_name }} / 100, {{ decimal_places }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3121216}, "macro.jaffle_shop.clean_stale_models": {"unique_id": "macro.jaffle_shop.clean_stale_models", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "macros/clean_stale_models.sql", "original_file_path": "macros/clean_stale_models.sql", "name": "clean_stale_models", "macro_sql": "{% macro clean_stale_models(database=target.database, schema=target.schema, days=7, dry_run=True) %}\n    \n    {% set get_drop_commands_query %}\n        select\n            case \n                when table_type = 'VIEW'\n                    then table_type\n                else \n                    'TABLE'\n            end as drop_type, \n            'DROP ' || drop_type || ' {{ database | upper }}.' || table_schema || '.' || table_name || ';'\n        from {{ database }}.information_schema.tables \n        where table_schema = upper('{{ schema }}')\n        and last_altered <= current_date - {{ days }} \n    {% endset %}\n\n    {{ log('\\nGenerating cleanup queries...\\n', info=True) }}\n    {% set drop_queries = run_query(get_drop_commands_query).columns[1].values() %}\n\n    {% for query in drop_queries %}\n        {% if dry_run %}\n            {{ log(query, info=True) }}\n        {% else %}\n            {{ log('Dropping object with command: ' ~ query, info=True) }}\n            {% do run_query(query) %} \n        {% endif %}       \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3195002}, "macro.jaffle_shop.grant_select": {"unique_id": "macro.jaffle_shop.grant_select", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "macros/grant_select.sql", "original_file_path": "macros/grant_select.sql", "name": "grant_select", "macro_sql": "{% macro grant_select(schema=target.schema, role=target.role) %}\n\n    {% set sql %}\n        grant usage on schema {{ schema }} to role {{ role }};\n        grant select on all tables in schema {{ schema }} to role {{ role }};\n        grant select on all views in schema {{ schema }} to role {{ role }};\n    {% endset %}\n\n    {{ log('Granting select on all tables and views in schema ' ~ target.schema ~ ' to role ' ~ role, info=True) }}\n    {% do run_query(sql) %}\n    {{ log('Privileges granted', info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.325578}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.337525}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3388007}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3395834}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3408322}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3422225}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3434434}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3441203}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.345245}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.346337}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.346537}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3471382}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.347522}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3500097}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3512511}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3518114}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3533213}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3702533}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.375163}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3795562}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3833947}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3841214}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3848813}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3874352}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3881967}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3906753}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.391358}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.3968368}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.399814}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4017904}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4023523}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.406995}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4084172}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4092011}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4130256}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.413408}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4140155}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4150958}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4199824}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4208653}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4213758}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4222567}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4228137}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4234347}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4242134}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4250116}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.425618}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.428103}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.428791}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4293666}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4359977}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4368405}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4373279}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4377718}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4382381}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.438929}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4394653}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4402487}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4407554}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4411747}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4446032}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4452057}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4456036}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4461288}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4495106}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4499822}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4504824}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4509397}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4515998}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4529667}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4580593}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4584455}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4592357}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4596846}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4605436}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4611638}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.46264}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4632874}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4652421}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.469194}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.469654}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4701977}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4713268}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4751248}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4782023}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4806404}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4834936}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4859996}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.486766}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.48785}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4919276}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4925106}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4929817}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4933894}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4937518}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4969323}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.4977446}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.500259}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.501305}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5084422}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5170898}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5197906}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5203664}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5216389}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5220296}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.52232}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5227005}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5230231}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5242345}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.524825}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.527946}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.537456}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5452063}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.545951}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5463655}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5465899}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5470297}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5474465}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5479867}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5501127}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.550576}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5512297}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5522997}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.555942}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5565891}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.565225}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5657547}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5664358}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5668905}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.567165}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5690088}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5694168}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5698762}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5723083}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.5763438}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.592148}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6044793}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.613086}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6145833}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.617953}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6196635}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6239986}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6312873}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                  schema=schema,\n                                                                  database=database) %}\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6505597}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6621463}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6657863}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6699789}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.672506}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6772938}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6789448}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6808906}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6842613}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6848319}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6854093}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6867073}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.6980336}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.7086093}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.711765}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.71242}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.7155545}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.7160683}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.7165813}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.7173834}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.7230663}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.7266715}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.7275321}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.7284558}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1690119079.729305}}, "docs": {"jaffle_shop.order_status": {"unique_id": "jaffle_shop.order_status", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/jaffle_shop/stg_jaffle_shop.md", "original_file_path": "models/staging/jaffle_shop/stg_jaffle_shop.md", "name": "order_status", "block_contents": "One of the following values: \n\n| status         | definition                                       |\n|----------------|--------------------------------------------------|\n| placed         | Order placed, not yet shipped                    |\n| shipped        | Order has been shipped, not yet been delivered   |\n| completed      | Order has been received by customers             |\n| return pending | Customer indicated they want to return this item |\n| returned       | Item has been returned                           |"}, "jaffle_shop.filename": {"unique_id": "jaffle_shop.filename", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__metadata.md", "original_file_path": "models/staging/studielink/stg_studielink__metadata.md", "name": "filename", "block_contents": "Naam van csv-bestand waar data uit afkomstig is."}, "jaffle_shop.peildatum": {"unique_id": "jaffle_shop.peildatum", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__metadata.md", "original_file_path": "models/staging/studielink/stg_studielink__metadata.md", "name": "peildatum", "block_contents": "Peildatum van studielink"}, "jaffle_shop.volgnummer": {"unique_id": "jaffle_shop.volgnummer", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__metadata.md", "original_file_path": "models/staging/studielink/stg_studielink__metadata.md", "name": "volgnummer", "block_contents": "Het volgnummer van het telbestand van studielink"}, "jaffle_shop.weeknummer": {"unique_id": "jaffle_shop.weeknummer", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__metadata.md", "original_file_path": "models/staging/studielink/stg_studielink__metadata.md", "name": "weeknummer", "block_contents": "Het weeknummer van de peildatum waarop het bestand is samengesteld."}, "jaffle_shop.soort_hoger_onderwijs_code": {"unique_id": "jaffle_shop.soort_hoger_onderwijs_code", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "soort_hoger_onderwijs_code", "block_contents": "In dit veld wordt aangegeven of het verzoek voor een HBO of WO opleiding is. Dit is gebaseerd op de Isatcode uit de referentietabel ONDWyyyynnn (onderwijsgegevens). Deze tabel bevat de CROHO gegevens zoals DUO deze aan Studielink levert. Samen met andere referentiebestanden, wordt deze tabel op de Downloadserver in de map \u2018Downloadbestand, submap \u2018Referentietabellen\u2019 gepubliceerd.\n\n## Oorspronkelijke naam van kolom: HBO_WO\nMogelijke waarden:\n    H. \u2013 HBO opleiding.\n    W. \u2013 WO opleiding"}, "jaffle_shop.brin_code": {"unique_id": "jaffle_shop.brin_code", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "brin_code", "block_contents": "In dit veld staat de Brincode van de instelling volgens de CROHO-gegevens. Deze informatie is\ndirect afkomstig van de Studielink database kopie.\n\nBrincode volgens CROHO."}, "jaffle_shop.brin_volgnr": {"unique_id": "jaffle_shop.brin_volgnr", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "brin_volgnr", "block_contents": "Dit is de vestigingslocatie van de instellingen waar de opleiding gegeven wordt (volgens CROHO). Brinvolgnummer volgens CROHO."}, "jaffle_shop.opleidingscode": {"unique_id": "jaffle_shop.opleidingscode", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "opleidingscode", "block_contents": "In dit veld staat de Isatcode, ook wel de opleidingscode genoemd, volgens het CROHO."}, "jaffle_shop.type_hoger_onderwijs_code": {"unique_id": "jaffle_shop.type_hoger_onderwijs_code", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "type_hoger_onderwijs_code", "block_contents": "Dit is het type hoger onderwijs van de opleiding volgens de gegevens in het CROHO. Dit is gebaseerd op de Isatcode uit de referentietabel ONDWyyyynnn. Deze tabel bevat de CROHO gegevens zoals DUO deze aan Studielink levert. Samen met andere referentiebestanden, wordt deze tabel op de Downloadserver in de map \u2018Downloadbestand, submap \u2018Referentietabellen\u2019 gepubliceerd.\n\nMogelijke waarden:\n    A = Associate Degree.\n    B = Bachelor.\n    M = Master.\n    O = Ongedeelde opleiding.\n    P = Post initi\u00eble master."}, "jaffle_shop.opleidingsvorm_code": {"unique_id": "jaffle_shop.opleidingsvorm_code", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "opleidingsvorm_code", "block_contents": "Dit veld geeft de geselecteerde opleidingsvorm (Voltijd, Deeltijd of Duaal) weer van de opleiding waarvoor een inschrijvingsverzoek is ingediend. De mogelijke vormen zijn vastgelegd in het CROHO.\n\nMogelijke waarden:\n    1 \u2013 voltijd.\n    2 \u2013 deeltijd.\n    3 \u2013 duaal"}, "jaffle_shop.studiejaar": {"unique_id": "jaffle_shop.studiejaar", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "studiejaar", "block_contents": "In dit veld wordt het studiejaar genoemd waarop het inschrijfverzoek betrekking heeft. Dit kan zowel het lopende als het komende studiejaar. Dit studiejaar wordt aangegeven met het eerste\njaartal van dit studiejaar. Dus het studiejaar 2013-2014 wordt weergegeven als 2013.\n\nBijvoorbeeld 2016 voor het studiejaar 2016-2017."}, "jaffle_shop.fixus": {"unique_id": "jaffle_shop.fixus", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "fixus", "block_contents": "Dit veld geeft aan of er voor de betreffende opleiding een numerus fixus van toepassing is. \nMogelijke waarden:\n    N \u2013 geen fixus.\n    J \u2013 wel fixus."}, "jaffle_shop.maand_vanaf": {"unique_id": "jaffle_shop.maand_vanaf", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "maand_vanaf", "block_contents": "Dit veld geeft de maand aan waarin de student wil starten met zijn studie. Deze gegevens kunnen gecorrigeerd zijn door de instelling."}, "jaffle_shop.herkomst_code": {"unique_id": "jaffle_shop.herkomst_code", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "herkomst_code", "block_contents": "Het veld \u201cHerkomst\u201d geeft aan of een student uit Nederland, een EER-land, een niet-EER land of een onbekend land komt. Het veld wordt gevuld conform de nationaliteitscodes zoals DUO die verstrekt (de tabel op de volgende pagina geeft hiervan een samenvatting weer). De herkomst van een student wordt bepaald, gebaseerd op de twee geregistreerde nationaliteitscodes in Studielink.\nDe beslisboom ziet er als volgt uit:\nALS 1 van de 2 velden heeft de waarde 1 (Nederlander)\n    DAN wordt het veld herkomst gevuld met een \u201cN\u201d\n    ANDERS\n        ALS 1 van de 2 velden heeft een waarde 2 (EER-burger), volgens de EER-lijst\n        DAN wordt het veld herkomst gevuld met een \u201cE\u201d\n        ANDERS\n            ALS 1 van de 2 velden heeft een waarde 3 (Rest van de nationaliteiten)\n            DAN wordt het veld herkomst gevuld met een \u201cR\u201d\n            ANDERS\n                DAN wordt het veld gevuld met een \u201cO\u201d (Onbekend), volgens de EER-lijst\n\nMogelijke waarden:\n    N \u2013 Nederlander.\n    E \u2013 EER-burger.\n    R \u2013 niet EER-burger.\n    O \u2013 onbekend"}, "jaffle_shop.geslacht_code": {"unique_id": "jaffle_shop.geslacht_code", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "geslacht_code", "block_contents": "Gebaseerd op de gegevens uit de kopie van de Studielink-database wordt dit veld ingevuld.\nMogelijke waarden:\n    M \u2013 Man\n    V \u2013 Vrouw\n    O - Onbekend"}, "jaffle_shop.meercode": {"unique_id": "jaffle_shop.meercode", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "meercode", "block_contents": "Het telbestand is opgebouwd vanuit een wekelijkse Studielink-FOTO. In dit bestand wordt, per studiejaar, geteld hoeveel inschrijfverzoeken / inschrijvingen een student heeft en hoeveel\ninschrijfverzoeken geannuleerd zijn. Deze informatie wordt weergegeven in de velden, respectievelijk, \u2018Meercode_V\u2019 en \u2018Meercode_A\u2019.\n\nTijdens het opzetten van het telbestand wordt elk uniek verzoek in Studielink aan de hand van de status vertaald naar de verschillende meercodes. In de praktijk betekent dit dat wanneer een verzoek in week x de status V had, vermeld werd onder \u2018Meercode_V\u2019. Als je kijkt naar week x+1 kan dit verzoek de status A hebben, dan wordt hij vermeld onder \u2018Meerdoce_A\u2019 en is verdwenen uit \u2018Meercode_V\u2019.\n\n## Het veld \"Meercode_V\"\nDit veld geeft het aantal inschrijfverzoeken/inschrijvingen per student aan; hieronder valt elke status behalve de status A. Zie het onderstaande voorbeeld:\n\n## Het veld \"meercode_a\""}, "jaffle_shop.status_code": {"unique_id": "jaffle_shop.status_code", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "status_code", "block_contents": "Het veld \u201cStatus\u201d geeft aan welke status het inschrijfverzoek heeft, volgens de volgende codering:\n- Code V staat hierbij voor verzoek.\n- Code A voor annulering / afwijzing.\n- Code U voor uitschrijving / staken.\n- Code I voor inschrijving.\n\nIn de onderstaande tabel worden de verschillende scenario's voor de hierboven staande statussen omschreven. In de kolommen Meercode V en Meercode A wordt aangegeven bij welke status een inschrijfverzoek wordt betrokken in de berekening van het aantal in de betreffende kolom. Hieruit kun je concluderen dat alleen de status A (annulering/afwijzing) betrokken wordt in de berekening voor Meercode A, terwijl de overige statussen betrokken zijn bij de berekening van de Meercode V. In de migratie van de data zijn de velden uit de oude database naar de nieuwe database op de volgende manier overgezet.\n\n    Oude status HNS status\n    CANCELLED G\n    CEASED S\n    PLACEACCEPTED V\n    PLACEELAPSED V\n    PLACEOFFERED V\n    PLACEREFUSED V\n    REGISTERED I\n    REJECTED R\n    REQCANCELLATION I\n    REQREGISTRATION V\n    REQROLLINGOUT I\n    ROLLEDOUT U\n    WAITPLACEMENT V\n    WAITRANKING V\n    WITHDRAWN G\n\nDe statussen voor de telbestanden zijn geaggregeerd op basis van onderstaande mapping."}, "jaffle_shop.hogerejaars_code": {"unique_id": "jaffle_shop.hogerejaars_code", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "hogerejaars_code", "block_contents": "In Studielink kan de student aangeven of hij wil starten met zijn opleiding als hogerejaars. De instelling moet hier toestemming voor geven. De instelling kan dit veld ook veranderen, als de student bijvoorbeeld niet toegelaten wordt tot een hoger studiejaar, of omgekeerd als de instelling besluit dat een student mag instromen in een hoger studiejaar.\nDe impact van de mogelijkheid om aan te melden als hogerejaars betekent dat niet iedere nieuwe aanmelding automatisch garandeert dat een student in het eerste studiejaar van de opleiding begint. Voor de herinschrijvers betekent dit dat het grote merendeel als een hogerejaars student wordt weergegeven. Er zijn echter uitzonderingsituaties te bedenken dat een herinschrijver toch een eerstejaars student is, bijvoorbeeld in het geval van een tussentijdse instroom. \n\nMogelijke waarden:\n    J \u2013 instroom in een hoger studiejaar.\n    N \u2013 instroom in het eerste studiejaar"}, "jaffle_shop.herinschrijving_code": {"unique_id": "jaffle_shop.herinschrijving_code", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "herinschrijving_code", "block_contents": "Instellingen gaan op verschillende manieren om met de herinschrijving. Een aantal instellingen regelen een herinschrijving vanuit hun SIS, waardoor de herinschrijving als een nieuw verzoek tot inschrijving, met een instroom in een hoger studiejaar, in Studielink terecht kan komen. Om in het telbestand de herinschrijfverzoeken goed te kunnen onderscheiden worden een aantal stappen gezet:\n - Er wordt eerst gekeken of de student via Studielink een herinschrijfverzoek (kenmerk\n'Herinschrijving Studielink' heeft ingevoerd. In dat geval is de status in het veld\n'Herinschrijving' automatisch J(a).\n - Per student wordt, volgens onderstaande beslisboom, in het BRON-OD gekeken, of de student het studiejaar, voorafgaande aan het studiejaar waarvoor een verzoek gedaan wordt, een actieve inschrijving heeft in het BRON-OD bij dezelfde instelling en opleiding. Zo ja (de waarde OD is 3) dan wordt de status herinschrijving = J(a).\n\nBeslisboom BRON-OD:\n\n1. Komt de persoon afkomstig uit het SL-bestand voor in het actuele OD?\n    1. Nee >> waarde OD = 1.\n    1. Ja >> volgende vraag.\n1. Komt de persoon afkomstig uit het SL-bestand voor in OD met dezelfde Brin- en Isatcode?\n    1. Nee >> waarde OD = 2.\n    1. Ja >> volgende vraag.\n3. Komt de persoon afkomstig uit het SL-bestand met dezelfde Brin- en Isatcode voor in OD met het veld \u2018datum-einde-studie\u2019 gevuld met een datum dat eerder is dan de draaidatum (het moment dat het telbestand is aangemaakt)?\n    1. Nee >> waarde OD = 3.\n    1. Ja >> waarde OD = 4\n\nHet veld \u201cHerinschrijving\u201d wordt alleen op basis van bovenstaande regels door BRON-OD aangepast als het gaat om een inschrijving die start in de maanden september en oktober (maand 9 en 10). \n\nIn verband met de migratie naar HNS geldt de volgende toelichting:\n- De telbestanden over 2018 zijn tot en met 08-10-2018 (V54) gegenereerd door CACI. In deze bestanden is het veld \u2018Herinschrijving Studielink\u2019 wel gevuld.\n- De telbestanden over 2018 zijn vanaf 22-10-2018 (V56) gegenereerd door QDelft. In deze\ntelbestanden zal het veld \u2018Herinschrijving Studielink\u2019 gevuld zijn met de waarde \u2018O\u2019 van\nonbekend. Wel zal de koppeling met BRON-OD (zie eerder beschreven beslisboom) worden\ntoegepast.\n- Vanaf begin 2019 zal in HNS de functionaliteit m.b.t. herinschrijvingen ontwikkeld worden. Dit betekent dat de eigenschap 'H erinschrijving Studielink\u2019 voor studiejaar 2019 wel vanuit Studielink beschikbaar zal zijn.\n\n\nMogelijke waarden:\n    J.\n    N.\n    O."}, "jaffle_shop.soort_inschrijving_code": {"unique_id": "jaffle_shop.soort_inschrijving_code", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "soort_inschrijving_code", "block_contents": "In het telbestand zijn 2 kolommen opgenomen met een indicatie over de studentgegevens in het 1cijferHO-bestand bij DUO. In het 1cijferHO-bestand staat de geschiedenis van de verschillende studenten. Dit bestand wordt \u00e9\u00e9n keer per jaar aangevuld met de nieuwe hoger onderwijsstatus per 1 oktober van dat studiejaar. Deze gegevens worden in het telbestand vertaald naar een getal dat de geschiedenis van een student in het hoger onderwijs weergeeft. Bijvoorbeeld: begint de student aan zijn eerste opleiding in het hoger onderwijs, of heeft hij in het verleden al andere opleidingen gevolgd?\n\nVoor het 1cHO zijn er de volgende 2 verschillende kolommen; de 1cHO_L en 1cHO_K kolom.\n1. Het veld 1cHO_L (de lange reeks is voor het HBO), kijkt naar de volgende gegevens:\n    1. Is de student nieuw in het Hoger Onderwijs?\n    1. Is de student nieuw in het soort Hoger Onderwijs (HBO / WO)?\n    1. Is de student nieuw in de type Hoger Onderwijs (bachelor, master)?\n    1. Is de student nieuw bij de instelling?\n    1. Is de student nieuw bij de opleiding?\nDit houdt in dat de 1cHO_L de waardes 1, 2, 3, 4, 5, of 6 kan hebben\n\n1. Het veld 1cHO_K (de korte reeks voor het WO), kijkt naar de volgende gegevens:\n    1. Is de student nieuw in het Hoger Onderwijs?\n    1. Is de student nieuw in het soort Hoger Onderwijs (HBO / WO)?\n    1. Is de student nieuw bij de instelling?\n    1. Is de student nieuw bij de opleiding?\nDit veld kijkt dus niet naar het type Hoger Onderwijs (waarde 3). Dat betekent dat de 1cHO_K. de volgende waardes kan hebben: 1, 2, 4, 5, of 6.\n\nVoor het vast stellen van de 1cijferHO waarde in het telbestand, bestaat de volgende beslisboom.\n\n## TODO: toevoegen beslisboom uit documentatie Studielink\nOorspronkelijke naam kolom 1cho_L"}, "jaffle_shop.soort_inschrijving_code_wo": {"unique_id": "jaffle_shop.soort_inschrijving_code_wo", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "soort_inschrijving_code_wo", "block_contents": ""}, "jaffle_shop.aantal": {"unique_id": "jaffle_shop.aantal", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "aantal", "block_contents": "Dit veld geeft het aantal inschrijfverzoeken / inschrijvingen weer, die voldoen aan alle velden in de betreffende regel. Zie onderstaand voorbeeld:\n## TODO: toevoegen informatie uit documentatie Studielink."}, "jaffle_shop.dubbel_inschrijvingen": {"unique_id": "jaffle_shop.dubbel_inschrijvingen", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "dubbel_inschrijvingen", "block_contents": ""}, "jaffle_shop.gewogen_aantal": {"unique_id": "jaffle_shop.gewogen_aantal", "package_name": "jaffle_shop", "root_path": "/opt/dbt/jaffle_shop", "path": "staging/studielink/stg_studielink__telbestanden.md", "original_file_path": "models/staging/studielink/stg_studielink__telbestanden.md", "name": "gewogen_aantal", "block_contents": ""}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/airflow/.local/lib/python3.7/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.jaffle_shop.int_orders": ["model.jaffle_shop.stg_jaffle_shop__orders", "model.jaffle_shop.stg_stripe__payments"], "model.jaffle_shop.fct_customer_orders": ["model.jaffle_shop.int_orders", "model.jaffle_shop.stg_jaffle_shop__customers"], "model.jaffle_shop.stg_jaffle_shop__customers": ["source.jaffle_shop.jaffle_shop.customers"], "model.jaffle_shop.stg_jaffle_shop__orders": ["source.jaffle_shop.jaffle_shop.orders"], "model.jaffle_shop.stg_stripe__payments": ["source.jaffle_shop.stripe.payment"], "model.jaffle_shop.stg_studielink__metadata": ["source.jaffle_shop.studielink.metadata"], "model.jaffle_shop.stg_studielink__telbestanden": ["source.jaffle_shop.studielink.telbestanden"], "test.jaffle_shop.assert_positive_total_for_payments": ["model.jaffle_shop.stg_stripe__payments"], "test.jaffle_shop.assert_positive_total_for_payments_daily": ["model.jaffle_shop.stg_stripe__payments"], "seed.jaffle_shop.stg_studielink__geslacht": [], "seed.jaffle_shop.stg_studielink__herkomst": [], "seed.jaffle_shop.stg_studielink__opleidingsvorm": [], "seed.jaffle_shop.stg_studielink__soort_hoger_onderwijs": [], "seed.jaffle_shop.stg_studielink__soort_inschrijving": [], "seed.jaffle_shop.stg_studielink__status": [], "seed.jaffle_shop.stg_studielink__type_hoger_onderwijs": [], "test.jaffle_shop.unique_stg_jaffle_shop__customers_customer_id.231d91af86": ["model.jaffle_shop.stg_jaffle_shop__customers"], "test.jaffle_shop.not_null_stg_jaffle_shop__customers_customer_id.b4343d8610": ["model.jaffle_shop.stg_jaffle_shop__customers"], "test.jaffle_shop.unique_stg_jaffle_shop__orders_order_id.7f899b6afe": ["model.jaffle_shop.stg_jaffle_shop__orders"], "test.jaffle_shop.not_null_stg_jaffle_shop__orders_order_id.aad0410d08": ["model.jaffle_shop.stg_jaffle_shop__orders"], "test.jaffle_shop.accepted_values_stg_jaffle_shop__orders_order_status__completed__shipped__returned__return_pending__placed.66bdbafd6b": ["model.jaffle_shop.stg_jaffle_shop__orders"], "test.jaffle_shop.relationships_stg_jaffle_shop__orders_customer_id__customer_id__ref_stg_jaffle_shop__customers_.3e222ebf00": ["model.jaffle_shop.stg_jaffle_shop__customers", "model.jaffle_shop.stg_jaffle_shop__orders"], "test.jaffle_shop.source_unique_jaffle_shop_customers_id.2777a7933e": ["source.jaffle_shop.jaffle_shop.customers"], "test.jaffle_shop.source_not_null_jaffle_shop_customers_id.50aa22178f": ["source.jaffle_shop.jaffle_shop.customers"], "test.jaffle_shop.source_unique_jaffle_shop_orders_id.8a425b2fba": ["source.jaffle_shop.jaffle_shop.orders"], "test.jaffle_shop.source_not_null_jaffle_shop_orders_id.f924998b13": ["source.jaffle_shop.jaffle_shop.orders"], "test.jaffle_shop.source_unique_stripe_payment_id.3b7989ce64": ["source.jaffle_shop.stripe.payment"], "test.jaffle_shop.source_not_null_stripe_payment_id.f33f317f6c": ["source.jaffle_shop.stripe.payment"], "source.jaffle_shop.jaffle_shop.customers": [], "source.jaffle_shop.jaffle_shop.orders": [], "source.jaffle_shop.stripe.payment": [], "source.jaffle_shop.studielink.metadata": [], "source.jaffle_shop.studielink.telbestanden": []}, "child_map": {"model.jaffle_shop.int_orders": ["model.jaffle_shop.fct_customer_orders"], "model.jaffle_shop.fct_customer_orders": [], "model.jaffle_shop.stg_jaffle_shop__customers": ["model.jaffle_shop.fct_customer_orders", "test.jaffle_shop.not_null_stg_jaffle_shop__customers_customer_id.b4343d8610", "test.jaffle_shop.relationships_stg_jaffle_shop__orders_customer_id__customer_id__ref_stg_jaffle_shop__customers_.3e222ebf00", "test.jaffle_shop.unique_stg_jaffle_shop__customers_customer_id.231d91af86"], "model.jaffle_shop.stg_jaffle_shop__orders": ["model.jaffle_shop.int_orders", "test.jaffle_shop.accepted_values_stg_jaffle_shop__orders_order_status__completed__shipped__returned__return_pending__placed.66bdbafd6b", "test.jaffle_shop.not_null_stg_jaffle_shop__orders_order_id.aad0410d08", "test.jaffle_shop.relationships_stg_jaffle_shop__orders_customer_id__customer_id__ref_stg_jaffle_shop__customers_.3e222ebf00", "test.jaffle_shop.unique_stg_jaffle_shop__orders_order_id.7f899b6afe"], "model.jaffle_shop.stg_stripe__payments": ["model.jaffle_shop.int_orders", "test.jaffle_shop.assert_positive_total_for_payments", "test.jaffle_shop.assert_positive_total_for_payments_daily"], "model.jaffle_shop.stg_studielink__metadata": [], "model.jaffle_shop.stg_studielink__telbestanden": [], "test.jaffle_shop.assert_positive_total_for_payments": [], "test.jaffle_shop.assert_positive_total_for_payments_daily": [], "seed.jaffle_shop.stg_studielink__geslacht": [], "seed.jaffle_shop.stg_studielink__herkomst": [], "seed.jaffle_shop.stg_studielink__opleidingsvorm": [], "seed.jaffle_shop.stg_studielink__soort_hoger_onderwijs": [], "seed.jaffle_shop.stg_studielink__soort_inschrijving": [], "seed.jaffle_shop.stg_studielink__status": [], "seed.jaffle_shop.stg_studielink__type_hoger_onderwijs": [], "test.jaffle_shop.unique_stg_jaffle_shop__customers_customer_id.231d91af86": [], "test.jaffle_shop.not_null_stg_jaffle_shop__customers_customer_id.b4343d8610": [], "test.jaffle_shop.unique_stg_jaffle_shop__orders_order_id.7f899b6afe": [], "test.jaffle_shop.not_null_stg_jaffle_shop__orders_order_id.aad0410d08": [], "test.jaffle_shop.accepted_values_stg_jaffle_shop__orders_order_status__completed__shipped__returned__return_pending__placed.66bdbafd6b": [], "test.jaffle_shop.relationships_stg_jaffle_shop__orders_customer_id__customer_id__ref_stg_jaffle_shop__customers_.3e222ebf00": [], "test.jaffle_shop.source_unique_jaffle_shop_customers_id.2777a7933e": [], "test.jaffle_shop.source_not_null_jaffle_shop_customers_id.50aa22178f": [], "test.jaffle_shop.source_unique_jaffle_shop_orders_id.8a425b2fba": [], "test.jaffle_shop.source_not_null_jaffle_shop_orders_id.f924998b13": [], "test.jaffle_shop.source_unique_stripe_payment_id.3b7989ce64": [], "test.jaffle_shop.source_not_null_stripe_payment_id.f33f317f6c": [], "source.jaffle_shop.jaffle_shop.customers": ["model.jaffle_shop.stg_jaffle_shop__customers", "test.jaffle_shop.source_not_null_jaffle_shop_customers_id.50aa22178f", "test.jaffle_shop.source_unique_jaffle_shop_customers_id.2777a7933e"], "source.jaffle_shop.jaffle_shop.orders": ["model.jaffle_shop.stg_jaffle_shop__orders", "test.jaffle_shop.source_not_null_jaffle_shop_orders_id.f924998b13", "test.jaffle_shop.source_unique_jaffle_shop_orders_id.8a425b2fba"], "source.jaffle_shop.stripe.payment": ["model.jaffle_shop.stg_stripe__payments", "test.jaffle_shop.source_not_null_stripe_payment_id.f33f317f6c", "test.jaffle_shop.source_unique_stripe_payment_id.3b7989ce64"], "source.jaffle_shop.studielink.metadata": ["model.jaffle_shop.stg_studielink__metadata"], "source.jaffle_shop.studielink.telbestanden": ["model.jaffle_shop.stg_studielink__telbestanden"]}}